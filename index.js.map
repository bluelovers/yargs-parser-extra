{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":";AAAA;;GAEG;;;;;AAGH,+CAAuG;AACvG,8EAA+C;AAElC,QAAA,YAAY,GAAG,MAAM,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;AAmBpD,SAAgB,aAAa,CAAC,OAAiB;IAE9C,OAAO,6BAAY,CAAC,EAAE,EAAE,OAAO,EAAE;QAChC,aAAa,EAAE;YACd,YAAY,EAAE,IAAI;SAClB;KACD,CAAC,CAAA;AACH,CAAC;AAPD,sCAOC;AAED,SAAgB,QAAQ,CAAiE,KAAQ,EAAE,OAAiB;IAEnH,OAAO,GAAG,aAAa,CAAC,OAAO,CAAC,CAAA;IAEhC,IAAI,OAAO,CAAC,MAAM,EAClB;QACC,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAQ,CAAA;KAC3C;IAED,IAAI,OAAO,CAAC,GAAG,EACf;QACC,KAAK,GAAG,KAAK,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAQ,CAAA;KAC7C;IAED,IAAI,IAAI,GAAG,uBAAS,CAAC,KAAiB,EAAE,OAAO,CAAmC,CAAC;IAEnF,IAAI,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC;IAEpB,IAAI,GAAG;QACN,CAAC,EAAE,IAAI,CAAC,CAAC;QACT,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC;QACd,GAAG,IAAI;QACP,CAAC,oBAAY,CAAC,EAAE,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,CAAM;KACjD,CAAC;IAEF,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,IAAI,EAAE;QACjC,GAAG;YAEF,OAAO,IAAI,CAAC,IAAI,CAAC,CAAA;QAClB,CAAC;KACD,CAAC,CAAC;IAEH,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IAEjB,OAAO,IAAI,CAAA;AACZ,CAAC;AAnCD,4BAmCC;AAED,SAAgB,SAAS,CAAiE,KAAQ,EAAE,OAAiB;IAEpH,OAAO,QAAQ,CAAO,KAAK,EAAE,OAAO,CAAC,CAAC,IAAI,CAAA;AAC3C,CAAC;AAHD,8BAGC;AAED,kBAAe,SAAS,CAAA","sourcesContent":["/**\n * Created by user on 2020/1/19.\n */\n\nimport { Options as _Options, Arguments as _Arguments } from 'yargs-parser';\nimport _Parser, { detailed as _detailed, DetailedArguments as _DetailedArguments } from 'yargs-parser';\nimport defaultsDeep from 'lodash.defaultsdeep';\n\nexport const SymInputArgs = Symbol.for('InputArgs');\ntype InputArg = string | number | boolean;\nexport type InputArgs = InputArg[];\n\nexport type Options = _Options & {\n\tfilter?(arg: InputArg, index: number, input: InputArgs): boolean,\n\tmap?(arg: InputArg, index: number, input: InputArgs): string,\n}\n\nexport type Arguments<T extends Record<string, any> = Record<string, any>, P extends InputArgs = InputArgs> = _Arguments & T & {\n\t[SymInputArgs]: Readonly<P>,\n\t'--'?: string[],\n\t__?: string[],\n}\n\nexport type DetailedArguments<T extends Record<string, any> = Record<string, any>, P extends InputArgs = InputArgs> = Omit<Arguments, 'argv'> & {\n\targv: Arguments<T, P>;\n}\n\nexport function handleOptions(options?: Options): Options\n{\n\treturn defaultsDeep({}, options, {\n\t\tconfiguration: {\n\t\t\t'populate--': true,\n\t\t},\n\t})\n}\n\nexport function detailed<T extends Record<string, any>, P extends InputArgs = InputArgs>(input: P, options?: Options)\n{\n\toptions = handleOptions(options)\n\n\tif (options.filter)\n\t{\n\t\tinput = input.filter(options.filter) as any\n\t}\n\n\tif (options.map)\n\t{\n\t\tinput = input.slice().map(options.map) as any\n\t}\n\n\tlet data = _detailed(input as string[], options) as any as DetailedArguments<T, P>;\n\n\tlet { argv } = data;\n\n\targv = {\n\t\t_: argv._,\n\t\t__: argv['--'],\n\t\t...argv,\n\t\t[SymInputArgs]: Object.freeze(input.slice()) as P,\n\t};\n\n\tObject.defineProperty(argv, '__', {\n\t\tget()\n\t\t{\n\t\t\treturn this['--']\n\t\t},\n\t});\n\n\tdata.argv = argv;\n\n\treturn data\n}\n\nexport function parseArgv<T extends Record<string, any>, P extends InputArgs = InputArgs>(input: P, options?: Options)\n{\n\treturn detailed<T, P>(input, options).argv\n}\n\nexport default parseArgv\n"]}